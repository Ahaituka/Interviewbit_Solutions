/*
 Distribute CandyBookmark Suggest Edit
There are N children standing in a line. Each child is assigned a rating value.

 You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

Sample Input :

Ratings : [1 2]
Sample Output :

3
The candidate with 1 rating gets 1 candy and candidate with rating cannot get 1 candy as 1 is its neighbor. So rating 2 candidate gets 2 candies. In total, 2+1 = 3 candies need to be given out.
 */

//two methods to solve
//candy1 -> O(n^2)
//candy2 -> O(n)


#include <iostream>
#include <vector>


using namespace std;

int candy2(vector<int> &ratings) {
    int candiesCnt = 0, curCandy, pos;
    vector<pair<int, int> > valueWithPos;
    for (int i = 0; i < ratings.size(); i++) {
        valueWithPos.push_back(make_pair(ratings[i], i));
    }
    sort(valueWithPos.begin(), valueWithPos.end());
    vector<int> candies(ratings.size(), 0);
    for (int i = 0; i < valueWithPos.size(); i++) {
        pos = valueWithPos[i].second;
        curCandy = 0;
        if (pos > 0 && ratings[pos - 1] < ratings[pos]) {
            curCandy = candies[pos - 1];
        }
        if (pos < ratings.size() - 1 && ratings[pos + 1] < ratings[pos]) {
            curCandy = max(curCandy, candies[pos + 1]);
        }
        candies[pos] = curCandy + 1;
        candiesCnt += candies[pos];
    }
    return candiesCnt;
}

int candy1(vector<int> A) {
    vector<int> B(A.size());
    for (int i = 0; i < A.size(); ++i) {
        B[i] = 1;

    }
    for (int j = 0; j < A.size(); ++j) {

        if (A[j] > A[j + 1] and B[j] <= B[j + 1] and j != A.size() - 1) {
            B[j] += 1;
        }
        if (A[j] > A[j - 1] and j != 0 and B[j] <= B[j - 1]) {
            B[j] = (B[j - 1] - B[j]) + 1 + B[j];

        }
        if (A[j] < A[j - 1] and B[j] >= B[j - 1] and j != 0) {
            B[j - 1] = (B[j] - B[j - 1]) + 1 + B[j - 1];
        }
//        if(B[j-1]==B[j-2] and j)
//        {
//            B[j-2] = (B[j-1]-B[j-2])+1+B[j-2] ;
//        }
        int k = j;
        while (k > 0) {
            if (B[k] == B[k - 1] and A[k] != A[k - 1])
                B[k - 1]++;
            k--;

        }


    }
    // -255, 369, 319, 77, 128, -202, -147, 282, -26, -489, -443, -401, 385, 465, -134, 126, 304, 179, 16, 112, 473, -467, 279, -233, 66, 76, 408, 148, -369, 328, 138, -164, 492, -276, -326, 170, 168, 189, 13, 383, 341, 426, 219, 337, -62, -197, 263, 338, -324, 261, 273, -74, -8, -133, 318, -100, 487, -196, -465, -495, -136, 94, -201, 491, 204, 323, 156, -337, -99, 115, 179, 184, -249, 76, -396, 265, 500, -83, 270, 438, -418, 401, -184, -247, -203, 190, 191, -282, -248, 465, 146, 7, -381, 326, -409, 474, 186, -206, 447, 17, 156, -273, 381, -307, -206, 164, -147, 58, -224, 284, 204, 267, 123, 141, -8, 225, -246, 12, 399, -261, -104, 191, 390, 152, 313, -91, 8, -476, -363, -183, -280, -282, -431, 366, 89, -166, -257, 132, 98, -387, 389, -219, -332, 227, 386, -33, 361, -308, -494, -33, 110, 423, -465, -417, 496, -333, -259, 402, 36, 380, -385, -329, 283, 389, 396, -161, 466, -405, -293, 442, 259, 377, -386, -386, 329, 204, 438, 346, -185, -401, -219, 213, 351, -18, -20, 364, 319, 187, 197, 122, -182, -126, -211, -448, 44, -360, -345, -147, 480, -387, 222, 92, -262, -409, 163, 323, -291, -61, -431, -288, -309, -490, -494, 328, -207, 398, 475, -228, -37, 44, 227, -371, -91, -440, 220, 39, -73, 80, -189, 37, 94, -96, -400, -380, 172, -179, -442, -119, 411, -184, 218, -18, 170, 430, -157, 345, 418, 390, -39, -85, 216, -197, -421, 328, -311, 160, 432, 104, -419, -140, -115, -202, 58, 415, 473, -87, 475, 430, 114, -314, 430, -419, 375, 258, 255, 42, -63, 54, -352, -337, -180, -31, 441, -382, -176, 209, -137, 171, -89, 155, 421, 308, -153, 254, -210, -245, 373, -435, -29, -398, 326, 297, 81, -157, 254, 52, 479, 356, -497, -16, 109, -353, -20, -122, -172, 23, 20, -344, 203, 372, -306, -9, 238, -190, 495, 9, -2, 125, 150, -180, -340, -1, -347, -269, -181, -15, 83, -304, -365, 490, -475, 161, 422, 440, -414, 380, -446, -404, -352, -144, -297, -62, -23, -223, 359, 127, 183, -20, 93, -285, -477, 223, 1, 131, -359, -74, 321, 197, 452, -338, 367, -337, 183, -41, 218, -75, -212, 208, 188, -38, 91, 332, 388, -185, -247, 405, -390, -371, 313, -471, 457, 307, 494, -467, -225, -3, -271, -164, -120, 101, 385, -12, 234, -368, -317, 167, 241, -494, -279, -288, 452, -499, 372, 464, 234, 16, 40, 264, -474, -400, 429, 33, 495, -285, 201, 190, 328, 127, 286, 312, 100, -24, 409, -392, 183, -69, -352, -56, -304, -261, -296, -140, 453, 253, -215, 195, 288, -300, 10, -104, -491, 275, -275, 175, 24, 387, 408
    //auto t= accumulate(B,0);
    int sum = 0;
    for (int k = 0; k < B.size(); ++k) {
        sum += B[k];
    }
    return sum;

}


int main() {
    vector<int> A = {-255, 369, 319, 77, 128, -202, -147, 282, -26, -489, -443, -401, 385, 465, -134, 126, 304, 179, 16,
                     112, 473, -467, 279, -233, 66, 76, 408, 148, -369, 328, 138, -164, 492, -276, -326, 170, 168, 189,
                     13, 383, 341, 426, 219, 337, -62, -197, 263, 338, -324, 261, 273, -74, -8, -133, 318, -100, 487,
                     -196, -465, -495, -136, 94, -201, 491, 204, 323, 156, -337, -99, 115, 179, 184, -249, 76, -396,
                     265, 500, -83, 270, 438, -418, 401, -184, -247, -203, 190, 191, -282, -248, 465, 146, 7, -381, 326,
                     -409, 474, 186, -206, 447, 17, 156, -273, 381, -307, -206, 164, -147, 58, -224, 284, 204, 267, 123,
                     141, -8, 225, -246, 12, 399, -261, -104, 191, 390, 152, 313, -91, 8, -476, -363, -183, -280, -282,
                     -431, 366, 89, -166, -257, 132, 98, -387, 389, -219, -332, 227, 386, -33, 361, -308, -494, -33,
                     110, 423, -465, -417, 496, -333, -259, 402, 36, 380, -385, -329, 283, 389, 396, -161, 466, -405,
                     -293, 442, 259, 377, -386, -386, 329, 204, 438, 346, -185, -401, -219, 213, 351, -18, -20, 364,
                     319, 187, 197, 122, -182, -126, -211, -448, 44, -360, -345, -147, 480, -387, 222, 92, -262, -409,
                     163, 323, -291, -61, -431, -288, -309, -490, -494, 328, -207, 398, 475, -228, -37, 44, 227, -371,
                     -91, -440, 220, 39, -73, 80, -189, 37, 94, -96, -400, -380, 172, -179, -442, -119, 411, -184, 218,
                     -18, 170, 430, -157, 345, 418, 390, -39, -85, 216, -197, -421, 328, -311, 160, 432, 104, -419,
                     -140, -115, -202, 58, 415, 473, -87, 475, 430, 114, -314, 430, -419, 375, 258, 255, 42, -63, 54,
                     -352, -337, -180, -31, 441, -382, -176, 209, -137, 171, -89, 155, 421, 308, -153, 254, -210, -245,
                     373, -435, -29, -398, 326, 297, 81, -157, 254, 52, 479, 356, -497, -16, 109, -353, -20, -122, -172,
                     23, 20, -344, 203, 372, -306, -9, 238, -190, 495, 9, -2, 125, 150, -180, -340, -1, -347, -269,
                     -181, -15, 83, -304, -365, 490, -475, 161, 422, 440, -414, 380, -446, -404, -352, -144, -297, -62,
                     -23, -223, 359, 127, 183, -20, 93, -285, -477, 223, 1, 131, -359, -74, 321, 197, 452, -338, 367,
                     -337, 183, -41, 218, -75, -212, 208, 188, -38, 91, 332, 388, -185, -247, 405, -390, -371, 313,
                     -471, 457, 307, 494, -467, -225, -3, -271, -164, -120, 101, 385, -12, 234, -368, -317, 167, 241,
                     -494, -279, -288, 452, -499, 372, 464, 234, 16, 40, 264, -474, -400, 429, 33, 495, -285, 201, 190,
                     328, 127, 286, 312, 100, -24, 409, -392, 183, -69, -352, -56, -304, -261, -296, -140, 453, 253,
                     -215, 195, 288, -300, 10, -104, -491, 275, -275, 175, 24, 387, 408};
    vector<int> B = {357, 287, 248, 96,
                     22};//, 295};//, -78, -239, -482, 74, 269, 265, -269, -130, 351, 109, 490, 431, -171, 335, 321, -485, 313, -475, -43, 322, -132, 42, -171, 389, 493, -444, -265, -458, -71, -395, 134, -233, 211, 356, -330, -336, 274, -193, -421, -163, 29, 329, -466, -60, 96, 432, 171, -385, -52, 120, -403, -325, -97, 100, 61, -80, -82, 426, 263, -256, 476, -390, 444, -148, 414, 376, -298, 192, -183, -53, 386, 127, -329, 125, -328, 490, -12, 132, 40, 414, 347, 439, 255, -343, -84, 256, 38, -368, 307, 463, 29, -428, -25, -51, -385, 145, 86, 441, 361, 183, -407, -227, -404, -225, -279, -37, 280, -13, -258, -393, 164, 361, 146, -293, 248, -320, -389, -337, 341, -1, -445, -420, 414, -63, 328, 120, -462, 318, 500, -358, 233, -165, 274, -388, -393, -48, 312, -173, 281, 325, -167, 383, 353, 125, -416, -179, -285, -449, 418, 288, 62, -186, 413, -500, 199, 281, -163, -99, 193, -130, 414, 392, 299, 328, 156, -247, -85, -455, -274, 54, -161, 82, -265, 311, -129, -143, 45, 308, 408, 346, 438, -441, -237, 402, -428, -230, 24, 317, -189, -356, -53, 419, 426, -362, 399, 460, 335, 84, 177, 138, 229, 162, 416, -284, -44, -423, -9, -271, 425, -166, -482, -335, -357, 6, -191, 261, 391, -68, 224, 402, -487, -45, 312, 233, -393, 138, -95, -139, -239, 234, 227, -292, 117, -131, -221, 373, 97, -456, -292, 460, 238, 280, 43, 206, -8, -117, 274, -10, 182, -77, -421, -309, 493, -355, -88, 14, 67, 112, 177, 426, 468, 449, 263, -208, 198, 378, -431, 444, -383};
    vector<int> c(B.begin(), B.end());
    cout << candy1(A);
    cout << endl;
    cout << candy2(A);

}